/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package projeto_integrador1.view;

import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import projeto_integrador1.DAO.RegistroDAO;
import projeto_integrador1.model.Registro;
import projeto_integrador1.model.Usuario;


public class TelaConsulta extends javax.swing.JFrame {

    private List<Registro> listarRegistros;
    private final Usuario usuario;

    /**
     * Creates new form TelaConsulta
     * @param usuario
     */
    public TelaConsulta(Usuario usuario) {
        this.usuario = usuario;
        initComponents();
        listarRegistros();
        aplicarPermissoes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtFiltro = new javax.swing.JTextField();
        btnPesquisa = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabela = new javax.swing.JTable();
        btnExcluir = new javax.swing.JButton();
        btnVoltar = new javax.swing.JButton();
        btnLimpar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Pesquisar por ID:");

        btnPesquisa.setBackground(new java.awt.Color(51, 153, 255));
        btnPesquisa.setText("Pesquisar");
        btnPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisaActionPerformed(evt);
            }
        });

        tabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "Nome", "Idade", "Identificação", "Curso/Departamento"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        }
    );
    jScrollPane1.setViewportView(tabela);

    btnExcluir.setBackground(new java.awt.Color(51, 153, 255));
    btnExcluir.setText("Excluir");
    btnExcluir.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnExcluirActionPerformed(evt);
        }
    });

    btnVoltar.setBackground(new java.awt.Color(51, 153, 255));
    btnVoltar.setText("Voltar");
    btnVoltar.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnVoltarActionPerformed(evt);
        }
    });

    btnLimpar.setBackground(new java.awt.Color(51, 153, 255));
    btnLimpar.setText("Limpar");
    btnLimpar.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnLimparActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel1)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(txtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(btnPesquisa)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(btnLimpar))
                .addGroup(layout.createSequentialGroup()
                    .addGap(15, 15, 15)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(btnExcluir)
                            .addGap(76, 76, 76)
                            .addComponent(btnVoltar)
                            .addGap(91, 91, 91)))))
            .addContainerGap(28, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGap(23, 23, 23)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel1)
                .addComponent(txtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnPesquisa)
                .addComponent(btnLimpar))
            .addGap(26, 26, 26)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(btnExcluir)
                .addComponent(btnVoltar))
            .addContainerGap(153, Short.MAX_VALUE))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        // Volta para a tela de Menu
        new TelaMenu(usuario).setVisible(true);
        dispose();
    }//GEN-LAST:event_btnVoltarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        int linhaSelecionada = tabela.getSelectedRow();
        
        if (linhaSelecionada >= 0){
            int confirmacao = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja excluir?", "Confirmação", JOptionPane.YES_NO_OPTION);
            
            if(confirmacao == JOptionPane.YES_OPTION){
                Registro registro = listarRegistros.get(linhaSelecionada);
                RegistroDAO dao = new RegistroDAO();
                dao.excluir(registro);
                listarRegistros();
            }
        }
        else {
            JOptionPane.showMessageDialog(this, "Selecionar um podcast para excluir.");
        }
    }//GEN-LAST:event_btnExcluirActionPerformed
    
    private void btnPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisaActionPerformed
        RegistroDAO dao = new RegistroDAO();
        String curso_departamento = txtFiltro.getText();
        List<Registro> lista = dao.filtrarPorRegistro(curso_departamento); // Faz a pesquisa com filtro de curso/departamento
        atualizarTabela(lista);
    }//GEN-LAST:event_btnPesquisaActionPerformed

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        txtFiltro.setText("");
        listarRegistros();
    }//GEN-LAST:event_btnLimparActionPerformed

    // Método para listar os registros cadastrados na tabela
    private void listarRegistros(){
        RegistroDAO dao = new RegistroDAO();
        List<Registro> lista = dao.listarRegistros();
        atualizarTabela(lista);
    }
    // Método para atualizar os registros na tabela
    private void atualizarTabela(List<Registro> lista){
        this.listarRegistros = lista;
        DefaultTableModel modelo = (DefaultTableModel) tabela.getModel(); 
        modelo.setRowCount(0);
        for (Registro r : lista){
            modelo.addRow(new Object[]{
              r.getNome(),r.getIdade(), r.getIdentificacao(), r.getCurso_departamento()
            });
        }
    }
    // Método para aplicar as permissões dos usuários
    private void aplicarPermissoes(){
        Usuario.TipoUsuario tipo = usuario.getTipo();
        
        switch(tipo){
            case ADMINISTRADOR -> {
                
            }
            case OPERADOR -> btnExcluir.setEnabled(false);
            case USUARIO -> btnExcluir.setEnabled(false);
                
            
        }
    }
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JButton btnPesquisa;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabela;
    private javax.swing.JTextField txtFiltro;
    // End of variables declaration//GEN-END:variables
}
